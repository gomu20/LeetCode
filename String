class Solution {
    public void reverseString(char[] s) {
         
        int left=0;
        int right=s.length-1;
        while(left<right){
            char temp=s[left];
             s[left]=s[right];
             s[right]=temp;
             

            left++;
            right--;
        }
                         
        }
       
        
    }
   
class Solution {
    public String reverseVowels(String s) {
        int left=0;
        int right=s.length()-1;
        char[] ch=s.toCharArray();
        String vowels="aeiouAEIOU";
        while(left<right){
            while(left<right && vowels.indexOf(ch[left])==-1 ){
                left++;

            }
            while(left<right && vowels.indexOf(ch[right])==-1 ){
                right--;

            }
           char temp=ch[right];
           ch[right]=ch[left];
           ch[left]=temp;
           left++;
           right--;
            
            }
       return new String (ch);
    }
}
class Solution {
    public boolean isPalindrome(String s) {
       

int left=0;
       int right=s.length()-1;

        while(left<right){

           while(left<right && !Character.isLetterOrDigit(s.charAt(left))){
            left++;
           }
           while(left<right && !Character.isLetterOrDigit(s.charAt(right))){
            right--;
           }
if
(Character.toLowerCase(s.charAt(left))!= Character.toLowerCase(s.charAt(right))){
return false;
}
       left++;
       right--;
        }
        return true;
        
    }
}
class Solution {
    public String reverseWords(String s) {
        String [] str=s.trim().split("\\s+");
        int left=0;
        int right=str.length-1;
        while(left<right){
            String temp=str[right];
            str[right]=str[left];
            str[left]=temp;
            left++;
            right--;
        }
        return  String .join(" ",str) ;
    }
}
class Solution {
    public int removeElement(int[] nums, int val) {
        int j=0;
        for(int i=0;i<nums.length;i++){
           if(nums[i]!=val){
            nums[j]=nums[i];
j++;
           }


class Solution {
    public int strStr(String haystack, String needle) {
      
      
    int index=haystack.indexOf(needle);
             
        
      
        return index;
    }
    
}

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        for(int i=0;i<n;i++){
            nums1[m+i]=nums2[i];

        }
        for(int i=0;i<nums1.length;i++){
            for(int j=i+1;j<nums1.length;j++){
            if(nums1[i]>nums1[j]){
               int temp=nums1[i];
                nums1[i]=nums1[j];
                nums1[j]=temp;
            }

        }
       
        } 
    }
}
           
        }
        return j;
    }
}
